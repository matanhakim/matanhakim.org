{
  "hash": "7d55cc4f687cfebe4b6d8a589ade785d",
  "result": {
    "markdown": "---\ntitle: \"Introducing rtrl - an R Package for RTL Languages\"\nsubtitle: \"Convenience functions to make some common tasks with right-to-left string printing easier, more convenient and with no need to remember long Unicode characters. Specifically helpful for right-to-left languages such as Arabic, Persian and Hebrew.\"\nauthor: \"Matan Hakim\"\ndate: \"2023-04-05\"\ncategories: \n  - news\n  - code\n  - rtlr\nimage: \"image.png\"\n---\n\n\n![](image.png){fig-alt=\"Hex logo for rtlr, \\\"rtlr\\\" text with a right-pointing arrow surrounded by a hexagon\" fig-align=\"center\"}\n\nDo you know anyone who speaks Arabic, Persian or Hebrew? Do you know any R professional who speaks any of these languages? Maybe **you are yourself** an R professional who speaks any of these languages and uses them in your R work?\n\nIf you have answered positively to any of these questions, this blog post is for you! Read along to find how rtlr can solve your right-to-left script problems.\n\n*TL;DR - You can use rtlr to fix right-to-left problems in R. install the package with* `install.packages(\"rtlr\")` *and use* `str_rtl()` *with your text as argument(s).*\n\n# What is the Problem with Right-to-Left Languages?\n\nAs coders and R professionals, the main tool in our toolbox is code. We write R code to solve problems, and this is what sets us apart from other professionals, such as analysts using some type of a [GUI](https://en.wikipedia.org/wiki/Graphical_user_interface) program. Nevertheless, code has a very clear postulate - it is written in English, and therefore it is written left-to-right (from now on: LTR, or RTL for \"right-to-left\"). For the most of us, this is an obvious choice, as English is the *lingua franca* of the programming world. But for a lot of us, There is a need to use data and communicate results in other languages. this problem becomes much more troublesome when using an RTL language.\n\nMore than 2.3 billion people around the world are speaking a language that is written right-to-left.[^1] Such languages include, for example, Arabic, Persian, Hebrew, and Fulani. I am myself a native Hebrew speaker, and this is what brought me to write this package. **Code is not meant to be written right-to-left**, and some problems arise when doing so. Let's look at an example.\n\n[^1]: <https://www.w3.org/International/questions/qa-scripts>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\n# install.packages(\"rtlr\")\nlibrary(rtlr)\ntheme_update(text = element_text(size = 20))\np <- ggplot(mtcars, aes(factor(cyl))) +\n  geom_bar()\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThis is a very basic plot of the mtcars dataset, showing the number of cars with each number of pistons. Now, let's think about the scenario where we communicate our analysis results to a non-English-speaking audience. Let's say our audience's native language is Arabic. Then, we should change the x-axis label:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  labs(\n    x = \"اسطوانات\"\n    # `x` in `labs()` says \"cylinders\" in Arabic.\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThis is fine, but let's say we need to add more information to the x-axis label, such as the current year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  labs(\n    x = \"اسطوانات (2023)\"\n    # `x` in `labs()` says \"cylinders (2023)\" in Arabic.\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThe code script correctly presents `(2023)` to the left of the word \"اسطوانات\" (meaning \"pistons\"), but our plot malfunctions: it shows `(2023)` to the right of \"اسطوانات\". This is a common problem in RTL languages, as R interpretes all code as written LTR. This problem is also present when ending a sentence with a punctuation mark, such as `.` or `,`.\n\n# rtlr - Solves Your RTL Problems\n\nThis is where rtlr steps in. its main (and currently only) function, `str_rtl()`, wraps strings with the Unicode character `\\u202B`, which tells R to handle everything in that string that comes after this character as RTL.[^2] it does so as a wrapper around `stringr::str_c()`.\n\n[^2]: For further reading on this, see: <https://unicode.org/reports/tr9/#Directional_Formatting_Characters>\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  labs(\n    x = str_rtl(\"اسطوانات (2023)\")\n    # `x` in `labs()` says \"cylinders (2023)\" in Arabic.\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n**This solved our problem!** The year parentheses are located correctly on the left side. A solution to this problem without using rtlr would look something like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  x = paste0(\"\\u202B\", \"اسطوانات (2023)\")\n```\n:::\n\n\nThis solution has two drawbacks: having to remember the exact Unicode character adds to your cognitive load, and when having to print multiple lines with `\\n` you have to paste `\\u202B` again.[^3] Let's look at a common use case, where we want to add an informative caption to the plot, this time in Hebrew, but we have too much text for a single line:\n\n[^3]: This is because `\\n` stops the RTL-embedding provided by `\\u202B`, and forces you to write this as `\\n\\u202B` instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  labs(\n    x = str_rtl(\"اسطوانات (2023)\"),\n    # `x` in `labs()` says \"cylinders (2023)\" in Arabic.\n    caption = \"מקור המידע: טבלה מובנית של נתוני מכוניות. עיבוד: מתן חכים. יש להקפיד על הצגת טקסט מימין לשמאל.\"\n    # `caption` in `labs()` says in Hebrew:\n    # \"Source of data: a built-in data frame of car data. Analysis: Matan Hakim.\"\n    # \"You should insist on showing your text right-to-left.\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWe have two problems here:\n\n1.  The caption gets cut off in the middle;\n\n2.  The dot in the end of the sentence is placed wrongly on the right side, while it should be on the left.\n\nThis can be easily solved after inserting each line as a separate string argument, and using the `multiline = TRUE` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  labs(\n    x = str_rtl(\"اسطوانات (2023)\"),\n    # `x` in `labs()` says \"cylinders (2023)\" in Arabic.\n    caption = str_rtl(\n      \"מקור המידע: טבלה מובנית של נתוני מכוניות. עיבוד: מתן חכים.\",\n      \"יש להקפיד על הצגת טקסט מימין לשמאל.\",\n      multiline = TRUE\n    )\n    # `caption` says in Hebrew:\n    # \"Source of data: a built-in data frame of car data. Analysis: Matan Hakim.\"\n    # \"You should insist on showing your text right-to-left.\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nNotice how the lines are split with no overflow, and how the final dot is placed on the left side, where it should be.\n\nFurther use cases might include printing to the console, where `str_rtl()` also comes in handy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"הנקודה צריכה להיות בסוף המשפט.\"\n# `x` says in Hebrew:\n# \"the dot should come at the end of the sentance.\"\n\ncat(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nהנקודה צריכה להיות בסוף המשפט.\n```\n:::\n\n```{.r .cell-code}\ncat(str_rtl(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n‫הנקודה צריכה להיות בסוף המשפט.\n```\n:::\n:::\n\n\nAgain, notice how the dot ends up in the left side, where it should be. Additionally, since this blog post is ultimately rendered to HTML, the first time `cat(x)` is printed, it is all mixed-up backwards (meaning \"tnirp\" instead of \"print\", but in Hebrew). This problem doesn't exist when printing to the console, but it does when writing web-published code.\n\nYou can learn more on rtlr with printing `?str_rtl`, visiting its [pkgdown website](https://matanhakim.github.io/rtlr/), or browsing its [Github repository](https://github.com/matanhakim/rtlr).\n\n# Conclusion\n\nThis blog post has introduced the rtlr package for the R programming language which helps plotting and printing RTL languages correctly. It uses its main function, `str_rtl()`, to achieve this. rtlr has seen its initial release and its version is v0.1.0 - I welcome suggestions for further use cases or implementations. Feel free to [open an issue on Github](https://github.com/matanhakim/rtlr/issues) or [email me](mailto:matanhakim@gmail.com).\n\nI would like to thank [Hadley Wickham](http://hadley.nz/) and [Jennifer Bryan](http://jennybryan.org/) for authoring [R Packages (2e)](https://r-pkgs.org/). Reading this book has been instrumental in the development of rtlr. Finally, Thanks to [Adi Sarid](https://adisarid.github.io/), whose helpful comments gave me confidence in this project and his suggestions would be implemented in future versions of rtlr.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}